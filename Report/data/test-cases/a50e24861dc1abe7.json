{
  "uid" : "a50e24861dc1abe7",
  "name" : "test_login[data0]",
  "fullName" : "TestCases.Login.test_baidu.TestLogin#test_login",
  "historyId" : "f908aac11843ade8edb47c43ceeede51",
  "time" : {
    "start" : 1631797535609,
    "stop" : 1631797535917,
    "duration" : 308
  },
  "description" : "描述！！！！",
  "descriptionHtml" : "<p>描述！！！！</p>\n",
  "status" : "broken",
  "statusMessage" : "ValueError: Invalid format string",
  "statusTrace" : "self = <TestCases.Login.test_baidu.TestLogin object at 0x000001F1D4D58488>\ndata = {'check': 'python_百度搜索', 'input': 'python', 'news': '新闻', 'title': '百度一下'}\nstart_session = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"1883afec239a16c15a7a6465e220cde1\")>\n\n    @allure.story(\"测试login 方法，story\")\n    @pytest.mark.parametrize('data', data1)\n    def test_login(self, data, start_session):\n        \"\"\"描述！！！！\"\"\"\n        logger.info(f\" 执行 {self.__class__.__name__} 测试套件Suite \")\n        logger.info(f\" 执行 {sys._getframe().f_code.co_name} 测试用例Case \")\n        try:\n>           news = BaiduPage(start_session).get_news_text()\n\nTestCases\\Login\\test_baidu.py:22: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <Pages.BaiduPage.baidu_page.BaiduPage object at 0x000001F1D4E24148>\n\n    def get_news_text(self):\n        loc_name = 'news_link_loc'\n        func = f'{self.__class__.__name__}.{sys._getframe().f_code.co_name}'\n    \n        loc, loc_info = locs(page, loc_name)\n        with allure.step(f\"[{mTime()}][{func}][{loc_name + '|' + loc_info}]{loc}\"):\n>           value = self.get_ele_text(loc, loc_name + '|' + loc_info, loc_name, f'{func}')\n\nPages\\BaiduPage\\baidu_page.py:50: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <Pages.BaiduPage.baidu_page.BaiduPage object at 0x000001F1D4E24148>\nloc = ('xpath', '//*[@id=\"s-top-left\"]/a[1]'), loc_info = 'news_link_loc|新闻'\nimg_doc = 'news_link_loc', m = 'BaiduPage.get_news_text', timeout = 20\nfrequency = 0.5\n\n    def get_ele_text(self, loc, loc_info, img_doc, m, timeout=TIMEOUT, frequency=FREQUENCY):\n        \"\"\"\n        获取WebElement对象的文本值\n        :param loc: 元素定位的XPATH元组表达式\n        :param img_doc: 截图说明\n        :param timeout: 等待的超时时间\n        :param frequency: 轮询频率\n        :return: WebElement对象的文本值\n        \"\"\"\n>       self.wait_ele_to_visible(loc, loc_info, img_doc, m, timeout, frequency)\n\nCommon\\basepage.py:282: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <Pages.BaiduPage.baidu_page.BaiduPage object at 0x000001F1D4E24148>\nloc = ('xpath', '//*[@id=\"s-top-left\"]/a[1]'), loc_info = 'news_link_loc|新闻'\nimg_doc = 'news_link_loc', m = 'BaiduPage.get_news_text', timeout = 20\nfrequency = 0.5\n\n    def wait_ele_to_visible(self, loc, loc_info, img_doc, m, timeout=TIMEOUT, frequency=FREQUENCY):\n        \"\"\"\n        等待元素可见\n        :param loc: 元素定位的XPATH元组表达式\n        :param img_doc: 截图说明\n        :param timeout: 等待的超时时间\n        :param frequency: 轮询频率\n        :return:\n        \"\"\"\n        try:\n            start_time = datetime.datetime.now()\n            WebDriverWait(self.driver, timeout, frequency).until(EC.visibility_of_element_located(loc))\n        except Exception as e:\n            self.save_capture(img_doc)\n            end_time = datetime.datetime.now()\n            case_logger.error(\"[{}]<{}>page locator<{}>fail，TIME:{}s {}\".format(m, sys._getframe().f_code.co_name, loc_info, usageTime(end_time,start_time), e))\n            raise\n        else:\n            end_time = datetime.datetime.now()\n>           case_logger.info(\"[{}]<{}>page locator<{}>is viaible，TIME:{}s\".format(m, sys._getframe().f_code.co_name, loc_info, usageTime(end_time,start_time)))\n\nCommon\\basepage.py:76: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nendtime = datetime.datetime(2021, 9, 16, 21, 5, 35, 688541)\nstarttime = datetime.datetime(2021, 9, 16, 21, 5, 35, 616967)\n\n    def usageTime(endtime, starttime):\n>       return starttime.strftime('%Y%m%d %H:%M:%S.%4f') + '/' + str((endtime - starttime))[5:11]\nE       ValueError: Invalid format string\n\nCommon\\utils.py:40: ValueError\n\nDuring handling of the above exception, another exception occurred:\n\nself = <TestCases.Login.test_baidu.TestLogin object at 0x000001F1D4D58488>\ndata = {'check': 'python_百度搜索', 'input': 'python', 'news': '新闻', 'title': '百度一下'}\nstart_session = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"1883afec239a16c15a7a6465e220cde1\")>\n\n    @allure.story(\"测试login 方法，story\")\n    @pytest.mark.parametrize('data', data1)\n    def test_login(self, data, start_session):\n        \"\"\"描述！！！！\"\"\"\n        logger.info(f\" 执行 {self.__class__.__name__} 测试套件Suite \")\n        logger.info(f\" 执行 {sys._getframe().f_code.co_name} 测试用例Case \")\n        try:\n            news = BaiduPage(start_session).get_news_text()\n            assert news == data['news']\n            BaiduPage(start_session).search(data['input'])\n    \n            logger.info(\" 结束执行 {0} 测试用例， 测试结果 --- PASS \".format(sys._getframe().f_code.co_name))\n            BasePage(start_session).save_capture(\"正常截图\")\n        except:\n            logger.error(\" 结束执行 {0} 测试用例， 测试结果 --- False \".format(sys._getframe().f_code.co_name))\n>           BasePage(start_session).save_capture(\"异常截图\")\n\nTestCases\\Login\\test_baidu.py:30: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nCommon\\basepage.py:35: in save_capture\n    case_logger.info(\"[{}]截图保存在：{}\".format(sys._getframe().f_code.co_name, file_name, usageTime(end_time,start_time)))\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nendtime = datetime.datetime(2021, 9, 16, 21, 5, 35, 916989)\nstarttime = datetime.datetime(2021, 9, 16, 21, 5, 35, 688541)\n\n    def usageTime(endtime, starttime):\n>       return starttime.strftime('%Y%m%d %H:%M:%S.%4f') + '/' + str((endtime - starttime))[5:11]\nE       ValueError: Invalid format string\n\nCommon\\utils.py:40: ValueError",
  "flaky" : false,
  "newFailed" : false,
  "beforeStages" : [ {
    "name" : "start_session",
    "time" : {
      "start" : 1631797531238,
      "stop" : 1631797535601,
      "duration" : 4363
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "stepsCount" : 0,
    "hasContent" : false
  }, {
    "name" : "_session_faker",
    "time" : {
      "start" : 1631797531128,
      "stop" : 1631797531238,
      "duration" : 110
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "stepsCount" : 0,
    "hasContent" : false
  } ],
  "testStage" : {
    "description" : "描述！！！！",
    "status" : "broken",
    "statusMessage" : "ValueError: Invalid format string",
    "statusTrace" : "self = <TestCases.Login.test_baidu.TestLogin object at 0x000001F1D4D58488>\ndata = {'check': 'python_百度搜索', 'input': 'python', 'news': '新闻', 'title': '百度一下'}\nstart_session = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"1883afec239a16c15a7a6465e220cde1\")>\n\n    @allure.story(\"测试login 方法，story\")\n    @pytest.mark.parametrize('data', data1)\n    def test_login(self, data, start_session):\n        \"\"\"描述！！！！\"\"\"\n        logger.info(f\" 执行 {self.__class__.__name__} 测试套件Suite \")\n        logger.info(f\" 执行 {sys._getframe().f_code.co_name} 测试用例Case \")\n        try:\n>           news = BaiduPage(start_session).get_news_text()\n\nTestCases\\Login\\test_baidu.py:22: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <Pages.BaiduPage.baidu_page.BaiduPage object at 0x000001F1D4E24148>\n\n    def get_news_text(self):\n        loc_name = 'news_link_loc'\n        func = f'{self.__class__.__name__}.{sys._getframe().f_code.co_name}'\n    \n        loc, loc_info = locs(page, loc_name)\n        with allure.step(f\"[{mTime()}][{func}][{loc_name + '|' + loc_info}]{loc}\"):\n>           value = self.get_ele_text(loc, loc_name + '|' + loc_info, loc_name, f'{func}')\n\nPages\\BaiduPage\\baidu_page.py:50: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <Pages.BaiduPage.baidu_page.BaiduPage object at 0x000001F1D4E24148>\nloc = ('xpath', '//*[@id=\"s-top-left\"]/a[1]'), loc_info = 'news_link_loc|新闻'\nimg_doc = 'news_link_loc', m = 'BaiduPage.get_news_text', timeout = 20\nfrequency = 0.5\n\n    def get_ele_text(self, loc, loc_info, img_doc, m, timeout=TIMEOUT, frequency=FREQUENCY):\n        \"\"\"\n        获取WebElement对象的文本值\n        :param loc: 元素定位的XPATH元组表达式\n        :param img_doc: 截图说明\n        :param timeout: 等待的超时时间\n        :param frequency: 轮询频率\n        :return: WebElement对象的文本值\n        \"\"\"\n>       self.wait_ele_to_visible(loc, loc_info, img_doc, m, timeout, frequency)\n\nCommon\\basepage.py:282: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <Pages.BaiduPage.baidu_page.BaiduPage object at 0x000001F1D4E24148>\nloc = ('xpath', '//*[@id=\"s-top-left\"]/a[1]'), loc_info = 'news_link_loc|新闻'\nimg_doc = 'news_link_loc', m = 'BaiduPage.get_news_text', timeout = 20\nfrequency = 0.5\n\n    def wait_ele_to_visible(self, loc, loc_info, img_doc, m, timeout=TIMEOUT, frequency=FREQUENCY):\n        \"\"\"\n        等待元素可见\n        :param loc: 元素定位的XPATH元组表达式\n        :param img_doc: 截图说明\n        :param timeout: 等待的超时时间\n        :param frequency: 轮询频率\n        :return:\n        \"\"\"\n        try:\n            start_time = datetime.datetime.now()\n            WebDriverWait(self.driver, timeout, frequency).until(EC.visibility_of_element_located(loc))\n        except Exception as e:\n            self.save_capture(img_doc)\n            end_time = datetime.datetime.now()\n            case_logger.error(\"[{}]<{}>page locator<{}>fail，TIME:{}s {}\".format(m, sys._getframe().f_code.co_name, loc_info, usageTime(end_time,start_time), e))\n            raise\n        else:\n            end_time = datetime.datetime.now()\n>           case_logger.info(\"[{}]<{}>page locator<{}>is viaible，TIME:{}s\".format(m, sys._getframe().f_code.co_name, loc_info, usageTime(end_time,start_time)))\n\nCommon\\basepage.py:76: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nendtime = datetime.datetime(2021, 9, 16, 21, 5, 35, 688541)\nstarttime = datetime.datetime(2021, 9, 16, 21, 5, 35, 616967)\n\n    def usageTime(endtime, starttime):\n>       return starttime.strftime('%Y%m%d %H:%M:%S.%4f') + '/' + str((endtime - starttime))[5:11]\nE       ValueError: Invalid format string\n\nCommon\\utils.py:40: ValueError\n\nDuring handling of the above exception, another exception occurred:\n\nself = <TestCases.Login.test_baidu.TestLogin object at 0x000001F1D4D58488>\ndata = {'check': 'python_百度搜索', 'input': 'python', 'news': '新闻', 'title': '百度一下'}\nstart_session = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"1883afec239a16c15a7a6465e220cde1\")>\n\n    @allure.story(\"测试login 方法，story\")\n    @pytest.mark.parametrize('data', data1)\n    def test_login(self, data, start_session):\n        \"\"\"描述！！！！\"\"\"\n        logger.info(f\" 执行 {self.__class__.__name__} 测试套件Suite \")\n        logger.info(f\" 执行 {sys._getframe().f_code.co_name} 测试用例Case \")\n        try:\n            news = BaiduPage(start_session).get_news_text()\n            assert news == data['news']\n            BaiduPage(start_session).search(data['input'])\n    \n            logger.info(\" 结束执行 {0} 测试用例， 测试结果 --- PASS \".format(sys._getframe().f_code.co_name))\n            BasePage(start_session).save_capture(\"正常截图\")\n        except:\n            logger.error(\" 结束执行 {0} 测试用例， 测试结果 --- False \".format(sys._getframe().f_code.co_name))\n>           BasePage(start_session).save_capture(\"异常截图\")\n\nTestCases\\Login\\test_baidu.py:30: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nCommon\\basepage.py:35: in save_capture\n    case_logger.info(\"[{}]截图保存在：{}\".format(sys._getframe().f_code.co_name, file_name, usageTime(end_time,start_time)))\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nendtime = datetime.datetime(2021, 9, 16, 21, 5, 35, 916989)\nstarttime = datetime.datetime(2021, 9, 16, 21, 5, 35, 688541)\n\n    def usageTime(endtime, starttime):\n>       return starttime.strftime('%Y%m%d %H:%M:%S.%4f') + '/' + str((endtime - starttime))[5:11]\nE       ValueError: Invalid format string\n\nCommon\\utils.py:40: ValueError",
    "steps" : [ {
      "name" : "[21:05:35.616][BaiduPage.get_news_text][news_link_loc|新闻]('xpath', '//*[@id=\"s-top-left\"]/a[1]')",
      "time" : {
        "start" : 1631797535617,
        "stop" : 1631797535689,
        "duration" : 72
      },
      "status" : "broken",
      "statusMessage" : "ValueError: Invalid format string\n",
      "statusTrace" : "  File \"D:\\desk20201127\\ks_web_allure\\Pages\\BaiduPage\\baidu_page.py\", line 50, in get_news_text\n    value = self.get_ele_text(loc, loc_name + '|' + loc_info, loc_name, f'{func}')\n  File \"D:\\desk20201127\\ks_web_allure\\Common\\basepage.py\", line 282, in get_ele_text\n    self.wait_ele_to_visible(loc, loc_info, img_doc, m, timeout, frequency)\n  File \"D:\\desk20201127\\ks_web_allure\\Common\\basepage.py\", line 76, in wait_ele_to_visible\n    case_logger.info(\"[{}]<{}>page locator<{}>is viaible，TIME:{}s\".format(m, sys._getframe().f_code.co_name, loc_info, usageTime(end_time,start_time)))\n  File \"D:\\desk20201127\\ks_web_allure\\Common\\utils.py\", line 40, in usageTime\n    return starttime.strftime('%Y%m%d %H:%M:%S.%4f') + '/' + str((endtime - starttime))[5:11]\n",
      "steps" : [ ],
      "attachments" : [ ],
      "parameters" : [ ],
      "attachmentsCount" : 0,
      "shouldDisplayMessage" : true,
      "stepsCount" : 0,
      "hasContent" : true
    } ],
    "attachments" : [ {
      "uid" : "8893898043476dcd",
      "name" : "异常截图",
      "source" : "8893898043476dcd.png",
      "type" : "image/png",
      "size" : 69323
    }, {
      "uid" : "3f6b7ec1f65aaee8",
      "name" : "log",
      "source" : "3f6b7ec1f65aaee8.txt",
      "type" : "text/plain",
      "size" : 356
    }, {
      "uid" : "40e3f94fa91dbca",
      "name" : "stderr",
      "source" : "40e3f94fa91dbca.txt",
      "type" : "text/plain",
      "size" : 494
    } ],
    "parameters" : [ ],
    "attachmentsCount" : 3,
    "shouldDisplayMessage" : true,
    "stepsCount" : 1,
    "hasContent" : true
  },
  "afterStages" : [ {
    "name" : "start_session::0",
    "time" : {
      "start" : 1631797536027,
      "stop" : 1631797536027,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "stepsCount" : 0,
    "hasContent" : false
  } ],
  "labels" : [ {
    "name" : "feature",
    "value" : "login 异常测试用例，feature"
  }, {
    "name" : "story",
    "value" : "测试login 方法，story"
  }, {
    "name" : "tag",
    "value" : "@pytest.mark.usefixtures('start_session')"
  }, {
    "name" : "parentSuite",
    "value" : "TestCases.Login"
  }, {
    "name" : "suite",
    "value" : "test_baidu"
  }, {
    "name" : "subSuite",
    "value" : "TestLogin"
  }, {
    "name" : "host",
    "value" : "DESKTOP-V8HO8M4"
  }, {
    "name" : "thread",
    "value" : "7656-MainThread"
  }, {
    "name" : "framework",
    "value" : "pytest"
  }, {
    "name" : "language",
    "value" : "cpython3"
  }, {
    "name" : "package",
    "value" : "TestCases.Login.test_baidu"
  }, {
    "name" : "resultFormat",
    "value" : "allure2"
  } ],
  "parameters" : [ {
    "name" : "data",
    "value" : "{'title': '百度一下', 'news': '新闻', 'input': 'python', 'check': 'python_百度搜索'}"
  } ],
  "links" : [ ],
  "hidden" : true,
  "retry" : true,
  "extra" : {
    "categories" : [ ],
    "tags" : [ "@pytest.mark.usefixtures('start_session')" ]
  },
  "source" : "a50e24861dc1abe7.json",
  "parameterValues" : [ "{'title': '百度一下', 'news': '新闻', 'input': 'python', 'check': 'python_百度搜索'}" ]
}